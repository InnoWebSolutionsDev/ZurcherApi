import api from '../../utils/axios';
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { Alert } from 'react-native';

// Initial state for the balance slice
const initialState = {
  incomes: [],
  expenses: [],
  balance: null,
  loading: false,
  error: null,
};

// Helper function to handle API errors
const handleError = (error, message) => {
  console.error(`${message} - Detalles del error:`, error.response?.data || error.message);
  return { error: true, message: error.response?.data?.message || error.message };
};

// Async thunk to get incomes and expenses by work ID
export const getIncomesAndExpensesByWorkId = createAsyncThunk(
  'balance/getIncomesAndExpensesByWorkId',
  async (workId) => {
    try {
      const response = await api.get(`/balance/work/${workId}`);
      return response.data;
    } catch (error) {
      const errorResult = handleError(error, 'Error al obtener ingresos y gastos por workId');
      Alert.alert('Error', errorResult.message); // Show error message in an alert
      throw errorResult; // Re-throw the error to be caught by the rejected case
    }
  }
);

// Async thunk to get balance by work ID
export const getBalanceByWorkId = createAsyncThunk(
  'balance/getBalanceByWorkId',
  async (workId) => {
    try {
      const response = await api.get(`/balance/balance/${workId}`);
      return response.data;
    } catch (error) {
      const errorResult = handleError(error, 'Error al obtener el balance por workId');
      Alert.alert('Error', errorResult.message);
      throw errorResult;
    }
  }
);

// Async thunk to get general balance
export const getGeneralBalance = createAsyncThunk(
  'balance/getGeneralBalance',
  async (filters) => {
    try {
      const response = await api.get('/balance/generalBalance', { params: filters });
      return response.data;
    } catch (error) {
      const errorResult = handleError(error, 'Error al obtener el balance general');
      Alert.alert('Error', errorResult.message);
      throw errorResult;
    }
  }
);

// Create a balance slice with Redux Toolkit
const balanceSlice = createSlice({
  name: 'balance',
  initialState,
  reducers: {
    // Reducer to clear errors
    clearBalanceError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    // Handle pending, fulfilled, and rejected cases for getIncomesAndExpensesByWorkId
    builder.addCase(getIncomesAndExpensesByWorkId.pending, (state) => {
      state.loading = true;
      state.error = null;
    });
    builder.addCase(getIncomesAndExpensesByWorkId.fulfilled, (state, action) => {
      state.loading = false;
      state.incomes = action.payload.incomes;
      state.expenses = action.payload.expenses;
    });
    builder.addCase(getIncomesAndExpensesByWorkId.rejected, (state, action) => {
      state.loading = false;
      state.error = action.error.message;
    });

    // Handle pending, fulfilled, and rejected cases for getBalanceByWorkId
    builder.addCase(getBalanceByWorkId.pending, (state) => {
      state.loading = true;
      state.error = null;
    });
    builder.addCase(getBalanceByWorkId.fulfilled, (state, action) => {
      state.loading = false;
      state.balance = action.payload;
    });
    builder.addCase(getBalanceByWorkId.rejected, (state, action) => {
      state.loading = false;
      state.error = action.error.message;
    });

    // Handle pending, fulfilled, and rejected cases for getGeneralBalance
    builder.addCase(getGeneralBalance.pending, (state) => {
      state.loading = true;
      state.error = null;
    });
    builder.addCase(getGeneralBalance.fulfilled, (state, action) => {
      state.loading = false;
      state.balance = action.payload;
    });
    builder.addCase(getGeneralBalance.rejected, (state, action) => {
      state.loading = false;
      state.error = action.error.message;
    });
  },
});

// Export the actions generated by createSlice
export const {
  clearBalanceError,
} = balanceSlice.actions;

// Export the reducer
export default balanceSlice.reducer;

// Export the async thunks
export const balanceActions = {
  getIncomesAndExpensesByWorkId,
  getBalanceByWorkId,
  getGeneralBalance,
};